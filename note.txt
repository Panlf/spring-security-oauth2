Spring Security OAuth2.0
		OAuth(开放授权) 是一个开放标准，允许用户授权第三方应用访问他们存储在另外的服务提供者上的信息，
		但不需要将用户名和密码提供给第三方应用或者分享他们数据的全部内容。
		
		服务提供商会给准入的接入方一个身份，用于接入时的凭据
			client_id	客户端标识
			client_secret 客户端秘钥
			
			授权服务器对两种OAuth2.0中的两个角色进行认证授权，分别是资源拥有者、客户端。
	
	Spring Security OAuth2.0是对OAuth2的一种实现
		提供两方面服务
			授权服务	Authorization Server 认证服务
			资源服务	Resource Server
			
			授权服务
				包含接入端以及登入用户的合法性进行验证并颁发token等功能
				
				AuthorizationEndPoint	服务于认证请求	默认URL 	/oauth/authorize
				TokenEndPoint 服务于访问令牌的请求	默认URL	 /oauth/token
			
			资源服务
				应包含对资源的保护功能，对非法请求进行拦截，对请求中token进行解析鉴权等，下面的过滤器
				用于实现OAuth2.0资源服务
					OAuth2AuthenticationProcessingFilter用来对请求给出的身份令牌解析鉴权
			
			
			认证流程
				1、客户端请求授权服务进行认证
				2、认证通过后由认证服务器颁发令牌
				3、客户端携带令牌token请求资源服务
				4、资源服务校验令牌合法性，合法即返回资源信息
					
	交互模型
		1、资源拥有者	用户
		2、客户端	APP
		3、服务提供方	包含两个角色
			认证服务器
			资源服务器
			
		
	令牌的访问和刷新
		Refresh Token
			作用是用来刷新Access Token。认证服务器提供一个刷新接口。
			为了安全，oAuth2.0引入了两个措施
			1、oAuth2.0要求	Refresh Token一定是保存在客户端的服务器上，而绝不能存放在狭义的客户端上(App、PC端软件上).
				调用refresh接口的时候，一定是从服务器到服务器的访问。
			2、oAuth2.0引入client_secret机制。即每一个client_id都对应一个client_secret。
				这个client_secret会在客户端申请client_id时，随client_id一起分配给客户端。客户端必须把client_secret
				妥善保管在服务器上，决不能泄露。刷新Access Token时，需要验证这个client_secret。
				
	客户端授权模式
		1、implicit	简化模式，不推荐使用
			适用于纯静态页面应用。
			没有自己的后台，只有客户端
			
			没有服务器端的第三方单页面应用，因为没有服务器端就无法接收授权码
			APP、小程序、HTML5 -》 第三方评论、第三方天气
			
			implicit 
			
			1、资源拥有者打开客户端，客户端要求资源拥有者给予授权，它将浏览器被重定向到授权服务器，重定向定时会附加客户端的身份信息
			
			/oauth/authorize?client_id=client&response_type=token
			
			2、浏览器出现向授权服务器授权页面，之后将用户同意授权
			
			3、授权服务器将授权码将access_token以hash的形式存放在重定向uri的fargment中发送浏览器
		
		2、authorization code	授权码模式
			授权码模式适用于有自己服务器的应用，它是一个一次性的临时凭证，用来换取access_token和refresh_token。
			
					
		oauth/token?...
		需要的参数
			client_id	客户端准入标识
			client_secret	客户端秘钥
			grant_type	授权类型，填写authorization_code授权模式
			code	授权码	授权码只使用一次就无效了，需要重新申请
			redirect_uri	申请授权码时的跳转url，一定要跟申请授权码时用的redirect_uri一致
				
				
			
		
		3、resource owner password credentials 密码模式
			密码模式，用户向客户端提供自己的用户和密码。客户端使用这些信息，向服务商提供商索要授权。
			需要比较高的信任
			
			1、资源拥有者将用户名、密码发给客户端
			2、客户端拿着资源拥有者的用户名、密码向授权服务器请求令牌(access_token)
			3、授权服务器将令牌(access_token)发送给client
			
			密码模式一般用于我们自己开发的，第一原生App或第一单页面应用
			
			oauth/token?...
				需要的参数
				client_id	客户端准入标识
				client_secret	客户端秘钥
				grant_type	授权类型，填写password 密码模式
				username	用户名
				password	密码
			
		
		4、client credentials 客户端模式
			如果更高的信任关系或者调用者是一个后端的模块，没有用户界面的时候，可以使用客户端模式。
			鉴权服务器直接对客户端进行身份验证，验证通过后返回token。
			
			1、客户端向授权服务器发送自己的身份信息，并请求令牌(access_token)
			2、确认客户端身份后无误后，将令牌(access_token)发送给client
			
			oauth/token?...
				需要的参数
				client_id	客户端准入标识
				client_secret	客户端秘钥
				grant_type	授权类型，填写client_credentials 密码模式

			
			
			
	oAuth2是一种授权协议，他的主要作用是为了提供认证和授权的标准
			
	OAuth2基于内存存储令牌
	
	默认端点URL
	/oauth/authorize	授权端点
	/oauth/token	令牌端点
	/oauth/confirm_access	用户确认授权提交端点
	/oauth/error	授权服务错误信息端点
	/oauth/check_token	用于资源服务访问的令牌解析端点
	/oauth/token_key	提供公有密钥的端点，如果你使用JWT令牌的话
	
	OAuth2基于JDBC内存存储令牌
	
		Client存到数据库
		Token 存到数据库
		
		clientDetails 重要属性
			clientId	必须的	用来标识客户的ID
			secret		需要值得信任的客户端	客户端安全码
			scope		用来限制客户端的访问范围	如果为空的话，那么客户端拥有全部的访问范围
			authorizedGrantTypes	此客户端可以使用的授权类型，默认为空
			authorities 此客户端可以使用的权限	基于Spring Security authorities
			
	
	JWTToken
	public class TokenConfig{
		private String SIGNING_KEY = "123";
		
		@Bean
		public TokenStore tokenStore(){
			return new JwtTokenSotre(accessTokenConverter());
		}
		
		@Bean
		public JwtaccessTokenConverter accessTokenConverter(){
			JwtaccessTokenConverter converter= new JwtaccessTokenConverter();
			converter.setSigningKey(SIGNING_KEY);//对称秘钥，资源服务器使用该秘钥来验证
			return converter;
		}
	}
	
	
	@Autowired
	private JwtaccessTokenConverter accessTokenConverter;
	
	@Bean
	public AuthorizationServerTokenServices tokenService(){
		DefaultTokenServices service = new DefaultTokenServices();
		service.setClientDetailsService(clientDetailsService);//客户端详情服务
		service.setSupportRefreshToken(true);//支持刷新令牌
		service.setTokenStore(tokenStore);//令牌存储策略
		
		//令牌增强
		TokenEnhancerChain tokenEnhancerChain = new TokenEnhancerChain();
		tokenEnhancerChain.setTokenEnhancers(Arrays.asList(accessTokenConverter));
		service.setTokenEnhancer(tokenEnhancerChain);
		
		service.setAccessTokenValiditySeconds(7200);//令牌默认有效期2小时
		service.setRefreshTokenValiditySeconds(259200);//刷新令牌默认有效期3天
		
		return service;
	}	
	
	资源服务器
		public class TokenConfig(){....}
		
		@Autowired
		public TokenStore tokenStore;
		
		public void configure(ReosurceServerSecurityConfigurer resources){
			resources.resourceId()
				.tokenStore(tokenStore)	//验证令牌服务
				.stateless(true);
		}
		
	认证/授权
		认证	验证账号、密码
		授权	你这个角色能操作哪些数据
		
	基于角色的访问控制
		RBAC	基于角色
		ACL		访问控制列表
		ABAC	基于属性
		PBAC	基于策略
		
		RBAC
			用户-角色-权限的授权模型
			user
			role
			permission
			user_role
			role_permission
		
	认证服务器流程
		GET访问获取授权码http://localhost:8080/oauth/authorize?client_id=client&response_type=code
		
		回调过来得到授权码 -- https://www.baidu.com/?code=il66iC
		
		获取令牌 POST
		http://client:secret@localhost:8080/oauth/token
		grant_type		authorization_code
		code 			il66iC
		
		access_token令牌码$2a$10$PQV0QJNy3KocuO.W9nith.mkm5O0ureY2Ry/oboV1gMcb3aUA4sjK
	
	
	
	授权服务器的配置
		1、EnableAuthorizationServer
		@Configuration
		@EnableAuthorizationServer
		public class AuthorizationServer 
				extends AuthorizationServerConfigurerAdapter{
		
		....
		}
		
		需要配置以下几个类
		ClientDetailsServiceConfigurer
		用来配置客户端详情服务(ClientDetailsService)，客户端详情信息在这里进行初始化，你能够把客户端详情信息
		写死在这里或者是通过数据库来存储调取详情信息
		
		AuthorizationServerEndpointsConfigurer
		用来配置令牌(token)的访问端点和令牌服务(token  services)
		
		AuthorizationServerSecurityConfigurer
		用来配置令牌端点的安全约束
		
		2、配置客户端详细信息
		ClientDetailsServiceConfigurer能够使用内存或者JDBC来实现客户端详情服务(ClientDetailsService),
		ClientDetailsService负责查找ClientDetails，而ClientDetails的几个重要属性
		
		clientId 	必须的，用来标识客户端的Id
		secret		需要值得信任的客户端 	客户端安全码
		scope		用来限制客户端的访问范围，如果为空(默认)的话，那么客户端拥有全部的访问范围
		authorizedGrandTypes	此客户端可以使用的授权类型，默认为空
		authorities	此客户端可以使用的权限	基于Spring Security authorities
		
		客户端详情(ClientDetails)能够在应用程序运行的时候进行更新，可以通过访问底层存储服务(例如将客户端详情存储在一个关系数据库的表中，
		就可以使用JdbcClientDetailsService)或者通过自己实现ClientRegistrationService接口(同时你也可以实现ClientDetailsService接口)来进行管理.
		
		3、管理令牌
		AuthorizationServerTokenServices接口定义了一些操作使得你可以对令牌进行一些必要的管理，令牌可以被用来加载身份信息，里面包含
		了这个令牌的相关权限。
		
		自己可以创建AuthorizationServerTokenServices这个接口的实现，则需要继承DefaultTokenServices这个类，里面包含了一些有用实现，
		你可以使用它来修改令牌的格式和令牌的存储。默认的，当它尝试创建一个令牌的时候，是使用随机值来进行填充的，除了持久化令牌是委托
		一个TokenStore接口实现以外，这个类几乎帮你做了所有的事情。并且TokenStore这个接口有一个默认的实现，它就是InMemoryTokenStore，
		所有令牌是被保存了内存中。除了使用这个类以外，你还可以使用一些其他的预定义实现，下面有几个版本，他们都实现了TokenStore接口
		
		InMemoryTokenStore
			默认采用的，他可以完美的工作在单服务器上(即访问并发量压力不大的情况下，并且它在失败的时候不会进行备份)，
			大多数的项目都可以使用这个版本的实现来进行尝试，你可以在开发的时候使用它进行管理。因为不会被保存到磁盘中，更易于调试。
			
		JdbcTokenStore
			这是一个基于JDBC的实现版本，令牌会被保存进关系型数据库。使用这个版本的实现时，你可以在不同的服务器之间共享令牌信息。
		
		JwtTokenStore
			全称JSON Web Token，它可以把令牌相关的数据进行编码，有一个缺点，撤销一个已经授权令牌将会非常困难，所以它通常用来处理
			一个生命周期较短的令牌以及撤销刷新令牌(refresh_token).
		
		4、令牌访问端点配置
			AuthorizationServerEndpointsConfigurer 这个对象的实例可以完成令牌服务以及令牌endpoint配置
			
			配置授权类型(Grant Types)
			AuthorizationServerEndpointsConfigurer通过设定以下属性决定支持授权类型(Grant Types)
				authenticationManager 认证管理器，当你选择了资源所有者密码(password)授权类型的时候，
					请设置这个属性注入一个AuthenticationManager对象
				
				userDetailsService 如果你设置这个属性，说明你有自己的UserDetailsService接口的实现
					当你设置这个之后，那么refresh_token即刷新令牌授权类型模式的流程中就会包含一个检查，
					用来保证这个账号是否仍然有效。
					
				authorizationCodeServices 用来设置授权码服务的，主要是用来"authorization_code"授权码类型模式
				
				implicitGrantService这个属性设置隐式授权模式，用来管理隐式授权模式的状态
				
				tokenGranter	当你设置这个东西(即TokenGranter接口实现)，那么授权将会交由你来完全掌控，并且会忽略
				掉上面的这几个属性，这个属性一般用作拓宽用途，即四种标准模式已经满足不了你的需求才会考虑这个。
				
			
			配置授权端点的URL(Endpoint URLS)
			AuthorizationServerEndpointsConfigurer这个配置对象有个叫做pathMapping()的方法用来配置端点URL链接，
			有两个参数
				第一个参数	String类型	这个端点URL的默认链接
				第一个参数	String类型，你要进行替代的URL链接
				
				框架的默认URL链接如下列表，可以作为这个pathMapping()方法的第一个参数
				/oauth/authorize	授权端点
				/oauth/token	令牌端点
				/oauth/confirm_access	用户确认授权提交端点
				/oauth/error	授权服务错误信息端点
				/oauth/check_token	用于资源服务访问的令牌解析端点
				/oauth/token_key	提供公有密钥的端点，如果你使用JWT令牌的话
				
				
				
			public class TokenConfig{
				private String SIGNING_KEY = "123";
				
				@Bean
				public TokenStore tokenStore(){
					return new JwtTokenSotre(accessTokenConverter());
				}
				
				@Bean
				public JwtaccessTokenConverter accessTokenConverter(){
					JwtaccessTokenConverter converter= new JwtaccessTokenConverter();
					converter.setSigningKey(SIGNING_KEY);//对称秘钥，资源服务器使用该秘钥来验证
					return converter;
				}
			}
			
			
			@Autowired
			private JwtaccessTokenConverter accessTokenConverter;
			
			@Bean
			public AuthorizationServerTokenServices tokenService(){
				DefaultTokenServices service = new DefaultTokenServices();
				service.setClientDetailsService(clientDetailsService);//客户端详情服务
				service.setSupportRefreshToken(true);//支持刷新令牌
				service.setTokenStore(tokenStore);//令牌存储策略
				
				//令牌增强
				TokenEnhancerChain tokenEnhancerChain = new TokenEnhancerChain();
				tokenEnhancerChain.setTokenEnhancers(Arrays.asList(accessTokenConverter));
				service.setTokenEnhancer(tokenEnhancerChain);
				
				service.setAccessTokenValiditySeconds(7200);//令牌默认有效期2小时
				service.setRefreshTokenValiditySeconds(259200);//刷新令牌默认有效期3天
				
				return service;
			}
				
				
				
			
			@Autowird
			private AuthorizationCodeServices authorizationCodeServices;
		
			@Autowird
			private AuthenticationManager authenticationManager;
			
			@Override
			public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {
				// 设置令牌
				endpoints.authenticationManager(authenticationManager)
						.authorizationCodeServices(authorizationCodeServices)
						.tokenServices(tokenServices())
						.allowedTokenEndpointRequestMethods(HttpMethod.POST)
			}
			
			
			@Bean
			public AuthorizationCodeServices authorizationCodeServices(){
				//设置授权码模式的授权码如何存取，暂时采用内存方式
				return new InMemoryAuthorizationCodeServices();
			}
			
			
		5、令牌端点的安全约束
			@Override
		    public void configure(AuthorizationServerSecurityConfigurer security) throws Exception {
		        security.
					tokenKeyAccess("permitAll()")	//oauth/token_key是公开的
					.checkTokenAccess("permitAll()")	//oauth/check_token是公开的
					.allowFormAuthenticationForClients();//表单认证
					
		    }
			
			tokenKey 这个endpoint当使用JwtToken且使用非对称加密时，资源服务用于获取公钥开放的，这里指这个endpoint完全公开
			checkToken这个endpoint完全公开
			允许表单认证
	
	
	
资源JWT token校验
	public static final String RESOURCE_ID = "res1"

	@Autowired
	TokenStore tokenStore;
		
		
	public void configure(ResourceServerSecurityConfigurer resources){
		resources.resourceId(RESOURCE_ID)
		.tokenStore(tokenSotre)
		.stateless(true);
	}

	
	
	
	
	资源服务器
		1、认证服务器配置
		spring:
			security:
				 oauth2:
				   client:
					 client-id: client
					 client-secret: secret
					 access-token-uri: http://localhost:8080/oauth/token
					 user-authorization-uri: http://localhost:8080/oauth/authorize
				   resource:
					 token-info-uri: http://localhost:8080/oauth/check_token
					 
		2、配置权限
		
		@Configuration
		@EnableResourceServer
		@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true, jsr250Enabled = true)
		public class ResourceServerConfiguration extends ResourceServerConfigurerAdapter {

			@Override
			public void configure(HttpSecurity http) throws Exception {
				http
						.exceptionHandling()
						.and()
						.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
						.and()
						.authorizeRequests()
						.antMatchers("/").hasAuthority("SystemContent")
						.antMatchers("/view/**").hasAuthority("SystemContentView")
						.antMatchers("/insert/**").hasAuthority("SystemContentInsert")
						.antMatchers("/update/**").hasAuthority("SystemContentUpdate")
						.antMatchers("/delete/**").hasAuthority("SystemContentDelete");
			}

		}
		
		3、访问资源
		http://localhost:8081/contents?access-token=.....
		
		
		
Spring Security实现分布式系统授权
	1、注册中心 Eureka
	2、认证服务器、资源服务器注册服务
	3、创建网关 zuul+gateway
	zuul.routes.uaa-service.stripPrefix=false
	zuul.routes.uaa-service.path=/uaa/***
	
	zuul.routes.order-service.stripPrefix=false
	zuul.routes.order-service.path=/order/***
	
	
	API 网关在认证授权体系里主要负责两件事：
		1、作为OAuth2.0的资源服务器角色，实现接入方权限拦截
		2、令牌解析并转发当前登录用户信息(明文token)给微服务
	微服务拿到明文token(明文token包含登录用户身份和权限信息)也需要做两件事
		1、用户授权拦截(看当前用户是否有权访问该资源)
		2、将用户信息存储到当前线程上下文(有利于后续业务逻辑随时获取当前用户信息)
	
	网关配置 
		
		1、作为资源服务器		需要TokenConfig
		2、资源配置
		@Configuration
		public class ResourceServerConfig{
		
			@Autowired
			private  TokenConfig  tokenConfig;
		
			public static final String RESOURCE_ID="res1"
		
			//uaa资源配置
			@EnableResourceServer
			@Configuration
			public class UaaServerConfig extends ResourceServerConfigurerAdapter{
					@Autowired
					private TokenStore tokenStore;
					
					public void configure(ResourceServerSecurityConfigurer resources){
						resources.tokenStore(tokenStore).resourceId(RESOURCE_ID).stateless(true);
					}
					
					public void configure(HttpSecurity http){
						http.authorizeRequests().addMathcers("/uaa/**").permitAll();
					}
			}
			
			
			//Order资源配置
			@EnableResourceServer
			@Configuration
			public class OrderServerConfig extends ResourceServerConfigurerAdapter{
				@Autowired
					private TokenStore tokenStore;
					
					public void configure(ResourceServerSecurityConfigurer resources){
						resources.tokenStore(tokenStore).resourceId(RESOURCE_ID).stateless(true);
					}
					
					public void configure(HttpSecurity http){
						http.authorizeRequests().addMathcers("/order/**").access("#oauth2.hasScope('ROLE_API')");
					}	
			}		
		}
		
		3、安全服务
		@Configuration
		public class WebSecurityConfig extends WebSecurityConfigurerAdapter{
		
			protected void configure(HttpSecurity http) throws Exception{
				http.authorizeRequests()
				.addMatchers("/**").permitAll()
				.and.csrf().disable();
			}
		}
	4、转发明文token给微服务
	
		Base64	
			encode
				Base64.getEncoder().encodeToString(bytes)
				
			decode
				Base64.getDecoder.decode(str);
	
		filter
		public class AuthFilter extends ZuulFilter{
		
			public boolean shouldFilter(){
				return true;
			}
		
			public int filterOrder(){
				return 0;
			}
			
			public Object run() throws ZuulException{
				//从安全上下文拿到context
				RequestContext ctx = RequestContext.getCurrentContext();
				Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
				if(!(authentication instanceof OAuth2Authentication)){
					return null;
				}
				OAuth2Authentication oAuth2Authentication = (OAuth2Authentication)authentication;
				
				Authentication userAuthentication = oAuth2Authentication.getUserAuthentication();
				
				
				//获取当前用户身份信息
				String principal = userAuthentication.getName();
				
				
				//获取当前用户权限信息
				List<String> authorities = new ArrayList<>();
				//从userAuthentication取出权限，放在authorities
				userAuthentication.getAuthorities().stream().forEach(c->authorities.add(((GrantedAuthority)c).getAuthority()));
				
				OAuth2Request oAuth2Request = oAuth2Authentication.getOAuth2Request();
				Map<String,Object> requestParameters = oAuth2Request.getRequestParameters();
				Map<String,Object> jsonToken = new HashMap<>(requestParameters);
				if(userAuthentication!=null){
					jsonToken.put("principal",principal);
					jsonToken.put("authorities",authorities);	
				}
				
				
				//把身份信息和权限信息放在json中，加入http的hearder中
				ctx.addZuulRequestHeader("json-token",Base64.encode(JSON.toJSONString(jsonToken)));
				
				
				
				
				
				//转发给微服务
				return null;
			
			}
		
		}
		
		@Configuration
		public class ZuulConfig{
		
			@Bean
			public  AuthFilter preFilter(){
				return new AuthFilter();
			}
			
			
			@Bean
			public FilterRegistrationBean corsFilter(){
				final UrlBasedCorsConfiguration source = new UrlBasedCorsConfiguration();
				final CorsConfiguration config = new CorsConfiguration();
				config.setAllowCredentials(true);
				config.addAllowedOrigin("*");
				config.addAllowedHeader("*");
				config.addAllowedMethod("*");
				config.setMaxAge("18000L");
				source.registerCorsCOnfiguration("/**",config);
				CorsFilter corsFilter = new CorsFilter(source);
				FilterRegistrantionBean bean = new FilterRegistrationBean(corsFilter);
				bean.setOrder(Ordered.HIGHEST_PRECEDENCE);
				return bean;
			}
		}
		
	5、微服务用户鉴权拦截
		Order项目中
		
		@Compoent
		public class TokenAuthenticaitonFilter extends OncePerRequestFilter(){
			
			protected void doFilterInternal(HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse,FilterChain filterChain){
				//解析出头中的token
				String token = httpServletRequest.getHeader("json-token");
				if(token!=null){
					String json = Base64.decode(token);
					//token转成json对象
					JSONObject josnObject = JSON.parseObject(json);
					//用户身份信息
					String 	principal = jsonObject.getString("principal");
					//用户权限
					JSONArray authritiesArray = jsonObject.getJSONArray("authorities");
					String authrities = authritiesArray.toArray(new String[authritiesArray.size()]);
					
					//将用户信息和权限填充到用户身份token对象中
					UsernamePasswordAuthenticationToken authenticationToken = 
						new UsernamePasswordAuthenticationToken(principal,null,AuthorityUtils.createAuthorityList(authrities));
						
					authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(httpServletRequest));
					
					//将authenticationToken填充到安全上下文
					SecurityContextHolder.getContext().setAuthentication(authenticationToken);
					
					
				}
				
				filterChain.doFilter(httpServletResuqest,httpServletResponse);
			}
		
		
		}
		
		
		资源中获取信息
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();